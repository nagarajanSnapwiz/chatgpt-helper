{"version":3,"file":"chatgpt-helper.cjs.development.js","sources":["../src/index.ts"],"sourcesContent":["import {\n  OpenAIApi,\n  ChatCompletionFunctions,\n  CreateChatCompletionRequest,\n  ChatCompletionResponseMessage,\n} from 'openai';\nimport { zodToJsonSchema } from 'zod-to-json-schema';\nimport { z } from 'zod';\n\nfunction getParameterFromZod(schema: z.ZodObject<any>) {\n  const {\n    $schema: _$schema,\n    //@ts-ignore\n    additionalProperties: _additionalProps,\n    ...jsonSchema\n  } = zodToJsonSchema(schema);\n  return jsonSchema;\n}\n\ntype AnyZodObject = z.ZodObject<any>;\n\nfunction createExtractor({\n  purpose: description,\n  schema,\n}: {\n  purpose: string;\n  schema: AnyZodObject;\n}): ChatCompletionFunctions {\n  const parameters = getParameterFromZod(schema);\n  return {\n    name: 'metadata_extract',\n    description,\n    parameters,\n  };\n}\n\ntype ToolImplementation = (\n  a?: any\n) => Promise<Record<string, any>> | Record<string, any>;\n\ntype ToolDefenitionArgs = {\n  name: string;\n  purpose: string;\n  argSchema?: AnyZodObject;\n  implementation: ToolImplementation;\n};\n\nexport class Tools {\n  tools: ChatCompletionFunctions[];\n  functions: Record<string, ToolImplementation>;\n\n  constructor() {\n    this.tools = [];\n    this.functions = {};\n  }\n\n  addTool({\n    name,\n    purpose: description,\n    argSchema: schema = z.object({}),\n    implementation,\n  }: ToolDefenitionArgs) {\n    this.functions[name] = implementation;\n    const parameters = getParameterFromZod(schema);\n    this.tools.push({\n      name,\n      description,\n      parameters,\n    });\n    return this;\n  }\n}\n\ntype RunWithToolsUntilCompleteArgs = {\n  api: OpenAIApi;\n  prompt: string;\n  tools: Tools;\n} & Partial<\n  Exclude<CreateChatCompletionRequest, 'functions' | 'function_call'>\n>;\n\nconst DEFAULT_MODEL = 'gpt-3.5-turbo-0613';\n\nexport async function runWithToolsUntilComplete({\n  api,\n  prompt,\n  tools,\n  model = DEFAULT_MODEL,\n  messages = [],\n  ...opts\n}: RunWithToolsUntilCompleteArgs) {\n  let complete = false;\n  messages = [...messages, { role: 'user', content: prompt }];\n  let lastMessage: ChatCompletionResponseMessage | undefined = undefined;\n  while (!complete) {\n    const chatCompletion = await api.createChatCompletion({\n      model,\n      messages,\n      functions: tools.tools,\n      function_call: 'auto',\n      ...opts,\n    });\n\n    const { message } = chatCompletion.data.choices?.[0];\n    lastMessage = message;\n    if (message) {\n      messages = [...messages, message];\n      if (message.function_call) {\n        const { name: functionName, arguments: _args = '{}' } =\n          message.function_call;\n        const functionArgument: Record<string, any> = JSON.parse(_args);\n        const functionResult = await tools.functions[functionName!](\n          functionArgument\n        );\n        messages = [\n          ...messages,\n          {\n            role: 'function',\n            name: functionName,\n            content: JSON.stringify(functionResult),\n          },\n        ];\n      } else {\n        complete = true;\n      }\n    } else {\n      throw new Error('MessageResponseEmpty');\n    }\n  }\n  return { messages, lastMessage };\n}\n\nexport async function extractDataWithPrompt({\n  api,\n  schema,\n  prompt: content,\n  metadataDescription: purpose = '',\n  ...opts\n}: {\n  api: OpenAIApi;\n  schema: AnyZodObject;\n  prompt: string;\n  metadataDescription?: string;\n} & Partial<\n  Exclude<\n    CreateChatCompletionRequest,\n    'messages' | 'functions' | 'function_call'\n  >\n>) {\n  const fn = createExtractor({ purpose, schema });\n  const { model = DEFAULT_MODEL, ...otherOpts } = opts;\n  const chatCompletion = await api.createChatCompletion({\n    model,\n    messages: [{ role: 'user', content }],\n    functions: [fn],\n    function_call: { name: fn.name },\n    ...otherOpts,\n  });\n  if (chatCompletion.data?.choices?.[0]?.message?.function_call) {\n    const { message } = chatCompletion.data.choices?.[0];\n    return { data: message!.function_call!.arguments, message };\n  } else {\n    throw new Error('ResultEmpty');\n  }\n}\n"],"names":["getParameterFromZod","schema","_zodToJsonSchema","zodToJsonSchema","jsonSchema","_objectWithoutPropertiesLoose","_excluded","createExtractor","_ref","description","purpose","parameters","name","Tools","tools","functions","_proto","prototype","addTool","_ref2","_ref2$argSchema","argSchema","z","object","implementation","push","DEFAULT_MODEL","runWithToolsUntilComplete","_x","_runWithToolsUntilComplete","apply","arguments","_asyncToGenerator","_regeneratorRuntime","mark","_callee","_ref3","api","prompt","_ref3$model","model","_ref3$messages","messages","opts","complete","lastMessage","_chatCompletion$data$2","chatCompletion","_chatCompletion$data$","message","_message$function_cal","functionName","_message$function_cal2","_args","functionArgument","functionResult","wrap","_callee$","_context","prev","next","_excluded2","concat","role","content","undefined","createChatCompletion","_extends","function_call","sent","data","choices","JSON","parse","stringify","Error","abrupt","stop","extractDataWithPrompt","_x2","_extractDataWithPrompt","_callee2","_ref4","_chatCompletion$data","_chatCompletion$data$3","_chatCompletion$data$4","_chatCompletion$data$5","_ref4$metadataDescrip","fn","_opts$model","otherOpts","_chatCompletion$data$7","_chatCompletion$data$6","_callee2$","_context2","metadataDescription","_excluded3","_excluded4"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AASA,SAASA,mBAAmBA,CAACC,MAAwB,EAAA;AACnD,EAAA,IAAAC,gBAAA,GAKIC,+BAAe,CAACF,MAAM,CAAC,CAAA;IADtBG,UAAU,GAAAC,6BAAA,CAAAH,gBAAA,EAAAI,SAAA,EAAA;AAEf,EAAA,OAAOF,UAAU,CAAA;AACnB,CAAA;AAIA,SAASG,eAAeA,CAAAC,IAAA,EAMvB;AAAA,EAAA,IALUC,WAAW,GAAAD,IAAA,CAApBE,OAAO;IACPT,MAAM,GAAAO,IAAA,CAANP,MAAM,CAAA;AAKN,EAAA,IAAMU,UAAU,GAAGX,mBAAmB,CAACC,MAAM,CAAC,CAAA;EAC9C,OAAO;AACLW,IAAAA,IAAI,EAAE,kBAAkB;AACxBH,IAAAA,WAAW,EAAXA,WAAW;AACXE,IAAAA,UAAU,EAAVA,UAAAA;GACD,CAAA;AACH,CAAA;AAaA,IAAaE,KAAK,gBAAA,YAAA;AAIhB,EAAA,SAAAA,QAAA;AAAA,IAAA,IAAA,CAHAC,KAAK,GAAA,KAAA,CAAA,CAAA;AAAA,IAAA,IAAA,CACLC,SAAS,GAAA,KAAA,CAAA,CAAA;IAGP,IAAI,CAACD,KAAK,GAAG,EAAE,CAAA;AACf,IAAA,IAAI,CAACC,SAAS,GAAG,EAAE,CAAA;AACrB,GAAA;AAAC,EAAA,IAAAC,MAAA,GAAAH,KAAA,CAAAI,SAAA,CAAA;AAAAD,EAAAA,MAAA,CAEDE,OAAO,GAAP,SAAAA,OAAAA,CAAAC,KAAA,EAKqB;AAAA,IAAA,IAJnBP,IAAI,GAAAO,KAAA,CAAJP,IAAI;MACKH,WAAW,GAAAU,KAAA,CAApBT,OAAO;MAAAU,eAAA,GAAAD,KAAA,CACPE,SAAS;MAAEpB,MAAM,GAAAmB,eAAA,KAAA,KAAA,CAAA,GAAGE,KAAC,CAACC,MAAM,CAAC,EAAE,CAAC,GAAAH,eAAA;MAChCI,cAAc,GAAAL,KAAA,CAAdK,cAAc,CAAA;AAEd,IAAA,IAAI,CAACT,SAAS,CAACH,IAAI,CAAC,GAAGY,cAAc,CAAA;AACrC,IAAA,IAAMb,UAAU,GAAGX,mBAAmB,CAACC,MAAM,CAAC,CAAA;AAC9C,IAAA,IAAI,CAACa,KAAK,CAACW,IAAI,CAAC;AACdb,MAAAA,IAAI,EAAJA,IAAI;AACJH,MAAAA,WAAW,EAAXA,WAAW;AACXE,MAAAA,UAAU,EAAVA,UAAAA;AACD,KAAA,CAAC,CAAA;AACF,IAAA,OAAO,IAAI,CAAA;GACZ,CAAA;AAAA,EAAA,OAAAE,KAAA,CAAA;AAAA,CAAA,GAAA;AAWH,IAAMa,aAAa,GAAG,oBAAoB,CAAA;AAEpBC,SAAAA,yBAAyBA,CAAAC,EAAA,EAAA;AAAA,EAAA,OAAAC,0BAAA,CAAAC,KAAA,CAAA,IAAA,EAAAC,SAAA,CAAA,CAAA;AAAA,CAAA;AA+C9C,SAAAF,0BAAA,GAAA;EAAAA,0BAAA,GAAAG,iBAAA,eAAAC,mBAAA,GAAAC,IAAA,CA/CM,SAAAC,OAAAA,CAAAC,KAAA,EAAA;AAAA,IAAA,IAAAC,GAAA,EAAAC,MAAA,EAAAxB,KAAA,EAAAyB,WAAA,EAAAC,KAAA,EAAAC,cAAA,EAAAC,QAAA,EAAAC,IAAA,EAAAC,QAAA,EAAAC,WAAA,EAAAC,sBAAA,EAAAC,cAAA,EAAAC,qBAAA,EAAAC,OAAA,EAAAC,qBAAA,EAAAC,YAAA,EAAAC,sBAAA,EAAAC,KAAA,EAAAC,gBAAA,EAAAC,cAAA,CAAA;AAAA,IAAA,OAAAtB,mBAAA,EAAA,CAAAuB,IAAA,CAAA,SAAAC,SAAAC,QAAA,EAAA;AAAA,MAAA,OAAA,CAAA,EAAA,QAAAA,QAAA,CAAAC,IAAA,GAAAD,QAAA,CAAAE,IAAA;AAAA,QAAA,KAAA,CAAA;UACLvB,GAAG,GAAAD,KAAA,CAAHC,GAAG,EACHC,MAAM,GAAAF,KAAA,CAANE,MAAM,EACNxB,KAAK,GAAAsB,KAAA,CAALtB,KAAK,EAAAyB,WAAA,GAAAH,KAAA,CACLI,KAAK,EAALA,KAAK,GAAAD,WAAA,KAAGb,KAAAA,CAAAA,GAAAA,aAAa,GAAAa,WAAA,EAAAE,cAAA,GAAAL,KAAA,CACrBM,QAAQ,EAARA,QAAQ,GAAAD,cAAA,KAAG,KAAA,CAAA,GAAA,EAAE,GAAAA,cAAA,EACVE,IAAI,GAAAtC,6BAAA,CAAA+B,KAAA,EAAAyB,UAAA,CAAA,CAAA;AAEHjB,UAAAA,QAAQ,GAAG,KAAK,CAAA;AACpBF,UAAAA,QAAQ,GAAAoB,EAAAA,CAAAA,MAAA,CAAOpB,QAAQ,EAAE,CAAA;AAAEqB,YAAAA,IAAI,EAAE,MAAM;AAAEC,YAAAA,OAAO,EAAE1B,MAAAA;AAAM,WAAE,CAAC,CAAA,CAAA;AACvDO,UAAAA,WAAW,GAA8CoB,SAAS,CAAA;AAAA,QAAA,KAAA,CAAA;AAAA,UAAA,IAC9DrB,QAAQ,EAAA;AAAAc,YAAAA,QAAA,CAAAE,IAAA,GAAA,EAAA,CAAA;AAAA,YAAA,MAAA;AAAA,WAAA;AAAAF,UAAAA,QAAA,CAAAE,IAAA,GAAA,CAAA,CAAA;AAAA,UAAA,OACevB,GAAG,CAAC6B,oBAAoB,CAAAC,QAAA,CAAA;AACnD3B,YAAAA,KAAK,EAALA,KAAK;AACLE,YAAAA,QAAQ,EAARA,QAAQ;YACR3B,SAAS,EAAED,KAAK,CAACA,KAAK;AACtBsD,YAAAA,aAAa,EAAE,MAAA;WACZzB,EAAAA,IAAI,CACR,CAAC,CAAA;AAAA,QAAA,KAAA,CAAA;UANII,cAAc,GAAAW,QAAA,CAAAW,IAAA,CAAA;AAAArB,UAAAA,qBAAA,IAAAF,sBAAA,GAQAC,cAAc,CAACuB,IAAI,CAACC,OAAO,KAAA,IAAA,GAAA,KAAA,CAAA,GAA3BzB,sBAAA,CAA8B,CAAC,CAAC,EAA5CG,OAAO,GAAAD,qBAAA,CAAPC,OAAO,CAAA;AACfJ,UAAAA,WAAW,GAAGI,OAAO,CAAA;AAAC,UAAA,IAAA,CAClBA,OAAO,EAAA;AAAAS,YAAAA,QAAA,CAAAE,IAAA,GAAA,EAAA,CAAA;AAAA,YAAA,MAAA;AAAA,WAAA;AACTlB,UAAAA,QAAQ,MAAAoB,MAAA,CAAOpB,QAAQ,EAAA,CAAEO,OAAO,CAAC,CAAA,CAAA;UAAC,IAC9BA,CAAAA,OAAO,CAACmB,aAAa,EAAA;AAAAV,YAAAA,QAAA,CAAAE,IAAA,GAAA,EAAA,CAAA;AAAA,YAAA,MAAA;AAAA,WAAA;UAAAV,qBAAA,GAErBD,OAAO,CAACmB,aAAa,EADTjB,YAAY,GAAAD,qBAAA,CAAlBtC,IAAI,EAAAwC,sBAAA,GAAAF,qBAAA,CAAgBnB,SAAS,EAAEsB,KAAK,GAAAD,sBAAA,KAAA,KAAA,CAAA,GAAG,IAAI,GAAAA,sBAAA,CAAA;AAE7CE,UAAAA,gBAAgB,GAAwBkB,IAAI,CAACC,KAAK,CAACpB,KAAK,CAAC,CAAA;AAAAK,UAAAA,QAAA,CAAAE,IAAA,GAAA,EAAA,CAAA;UAAA,OAClC9C,KAAK,CAACC,SAAS,CAACoC,YAAa,CAAC,CACzDG,gBAAgB,CACjB,CAAA;AAAA,QAAA,KAAA,EAAA;UAFKC,cAAc,GAAAG,QAAA,CAAAW,IAAA,CAAA;AAGpB3B,UAAAA,QAAQ,GAAAoB,EAAAA,CAAAA,MAAA,CACHpB,QAAQ,EACX,CAAA;AACEqB,YAAAA,IAAI,EAAE,UAAU;AAChBnD,YAAAA,IAAI,EAAEuC,YAAY;AAClBa,YAAAA,OAAO,EAAEQ,IAAI,CAACE,SAAS,CAACnB,cAAc,CAAA;AACvC,WAAA,CACF,CAAA,CAAA;AAACG,UAAAA,QAAA,CAAAE,IAAA,GAAA,EAAA,CAAA;AAAA,UAAA,MAAA;AAAA,QAAA,KAAA,EAAA;AAEFhB,UAAAA,QAAQ,GAAG,IAAI,CAAA;AAAC,QAAA,KAAA,EAAA;AAAAc,UAAAA,QAAA,CAAAE,IAAA,GAAA,EAAA,CAAA;AAAA,UAAA,MAAA;AAAA,QAAA,KAAA,EAAA;AAAA,UAAA,MAGZ,IAAIe,KAAK,CAAC,sBAAsB,CAAC,CAAA;AAAA,QAAA,KAAA,EAAA;AAAAjB,UAAAA,QAAA,CAAAE,IAAA,GAAA,CAAA,CAAA;AAAA,UAAA,MAAA;AAAA,QAAA,KAAA,EAAA;UAAA,OAAAF,QAAA,CAAAkB,MAAA,CAGpC,QAAA,EAAA;AAAElC,YAAAA,QAAQ,EAARA,QAAQ;AAAEG,YAAAA,WAAW,EAAXA,WAAAA;WAAa,CAAA,CAAA;AAAA,QAAA,KAAA,EAAA,CAAA;AAAA,QAAA,KAAA,KAAA;UAAA,OAAAa,QAAA,CAAAmB,IAAA,EAAA,CAAA;AAAA,OAAA;AAAA,KAAA,EAAA1C,OAAA,CAAA,CAAA;GACjC,CAAA,CAAA,CAAA;AAAA,EAAA,OAAAN,0BAAA,CAAAC,KAAA,CAAA,IAAA,EAAAC,SAAA,CAAA,CAAA;AAAA,CAAA;AAEqB+C,SAAAA,qBAAqBA,CAAAC,GAAA,EAAA;AAAA,EAAA,OAAAC,sBAAA,CAAAlD,KAAA,CAAA,IAAA,EAAAC,SAAA,CAAA,CAAA;AAAA,CAAA;AAgC1C,SAAAiD,sBAAA,GAAA;EAAAA,sBAAA,GAAAhD,iBAAA,eAAAC,mBAAA,GAAAC,IAAA,CAhCM,SAAA+C,QAAAA,CAAAC,KAAA,EAAA;AAAA,IAAA,IAAAC,oBAAA,EAAAC,sBAAA,EAAAC,sBAAA,EAAAC,sBAAA,CAAA;IAAA,IAAAjD,GAAA,EAAApC,MAAA,EAAA+D,OAAA,EAAAuB,qBAAA,EAAA7E,OAAA,EAAAiC,IAAA,EAAA6C,EAAA,EAAAC,WAAA,EAAAjD,KAAA,EAAAkD,SAAA,EAAA3C,cAAA,EAAA4C,sBAAA,EAAAC,sBAAA,EAAA3C,OAAA,CAAA;AAAA,IAAA,OAAAhB,mBAAA,EAAA,CAAAuB,IAAA,CAAA,SAAAqC,UAAAC,SAAA,EAAA;AAAA,MAAA,OAAA,CAAA,EAAA,QAAAA,SAAA,CAAAnC,IAAA,GAAAmC,SAAA,CAAAlC,IAAA;AAAA,QAAA,KAAA,CAAA;AACLvB,UAAAA,GAAG,GAAA6C,KAAA,CAAH7C,GAAG,EACHpC,MAAM,GAAAiF,KAAA,CAANjF,MAAM,EACE+D,OAAO,GAAAkB,KAAA,CAAf5C,MAAM,EAAAiD,qBAAA,GAAAL,KAAA,CACNa,mBAAmB,EAAErF,OAAO,GAAA6E,qBAAA,KAAG,KAAA,CAAA,GAAA,EAAE,GAAAA,qBAAA,EAC9B5C,IAAI,GAAAtC,6BAAA,CAAA6E,KAAA,EAAAc,UAAA,CAAA,CAAA;UAYDR,EAAE,GAAGjF,eAAe,CAAC;AAAEG,YAAAA,OAAO,EAAPA,OAAO;AAAET,YAAAA,MAAM,EAANA,MAAAA;AAAQ,WAAA,CAAC,CAAA;AAAAwF,UAAAA,WAAA,GACC9C,IAAI,CAA5CH,KAAK,EAALA,KAAK,GAAAiD,WAAA,KAAA,KAAA,CAAA,GAAG/D,aAAa,GAAA+D,WAAA,EAAKC,SAAS,GAAArF,6BAAA,CAAKsC,IAAI,EAAAsD,UAAA,CAAA,CAAA;AAAAH,UAAAA,SAAA,CAAAlC,IAAA,GAAA,CAAA,CAAA;AAAA,UAAA,OACvBvB,GAAG,CAAC6B,oBAAoB,CAAAC,QAAA,CAAA;AACnD3B,YAAAA,KAAK,EAALA,KAAK;AACLE,YAAAA,QAAQ,EAAE,CAAC;AAAEqB,cAAAA,IAAI,EAAE,MAAM;AAAEC,cAAAA,OAAO,EAAPA,OAAAA;AAAO,aAAE,CAAC;YACrCjD,SAAS,EAAE,CAACyE,EAAE,CAAC;AACfpB,YAAAA,aAAa,EAAE;cAAExD,IAAI,EAAE4E,EAAE,CAAC5E,IAAAA;AAAM,aAAA;WAC7B8E,EAAAA,SAAS,CACb,CAAC,CAAA;AAAA,QAAA,KAAA,CAAA;UANI3C,cAAc,GAAA+C,SAAA,CAAAzB,IAAA,CAAA;UAAA,IAAAc,EAAAA,CAAAA,oBAAA,GAOhBpC,cAAc,CAACuB,IAAI,KAAAc,IAAAA,IAAAA,CAAAA,sBAAA,GAAnBD,oBAAA,CAAqBZ,OAAO,KAAAc,IAAAA,IAAAA,CAAAA,sBAAA,GAA5BD,sBAAA,CAA+B,CAAC,CAAC,KAAA,IAAA,IAAA,CAAAE,sBAAA,GAAjCD,sBAAA,CAAmCpC,OAAO,KAAA,IAAA,IAA1CqC,sBAAA,CAA4ClB,aAAa,CAAA,EAAA;AAAA0B,YAAAA,SAAA,CAAAlC,IAAA,GAAA,EAAA,CAAA;AAAA,YAAA,MAAA;AAAA,WAAA;AAAAgC,UAAAA,sBAAA,IAAAD,sBAAA,GACvC5C,cAAc,CAACuB,IAAI,CAACC,OAAO,KAAA,IAAA,GAAA,KAAA,CAAA,GAA3BoB,sBAAA,CAA8B,CAAC,CAAC,EAA5C1C,OAAO,GAAA2C,sBAAA,CAAP3C,OAAO,CAAA;UAAA,OAAA6C,SAAA,CAAAlB,MAAA,CACR,QAAA,EAAA;AAAEN,YAAAA,IAAI,EAAErB,OAAQ,CAACmB,aAAc,CAACrC,SAAS;AAAEkB,YAAAA,OAAO,EAAPA,OAAAA;WAAS,CAAA,CAAA;AAAA,QAAA,KAAA,EAAA;AAAA,UAAA,MAErD,IAAI0B,KAAK,CAAC,aAAa,CAAC,CAAA;AAAA,QAAA,KAAA,EAAA,CAAA;AAAA,QAAA,KAAA,KAAA;UAAA,OAAAmB,SAAA,CAAAjB,IAAA,EAAA,CAAA;AAAA,OAAA;AAAA,KAAA,EAAAI,QAAA,CAAA,CAAA;GAEjC,CAAA,CAAA,CAAA;AAAA,EAAA,OAAAD,sBAAA,CAAAlD,KAAA,CAAA,IAAA,EAAAC,SAAA,CAAA,CAAA;AAAA;;;;;;"}