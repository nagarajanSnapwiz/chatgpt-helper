{"version":3,"file":"chatgpt-helper.cjs.production.min.js","sources":["../src/index.ts"],"sourcesContent":["import split2 from 'split2';\nimport { Readable } from 'stream';\nimport {\n  OpenAIApi,\n  ChatCompletionFunctions,\n  CreateChatCompletionRequest,\n  ChatCompletionResponseMessage,\n} from 'openai';\nimport { zodToJsonSchema } from 'zod-to-json-schema';\nimport { z } from 'zod';\n\n//TODO: have a strict type\ntype AnyZodObject = any;\n\nexport function getParameterFromZod(schema: AnyZodObject) {\n  const {\n    $schema: _$schema,\n    //@ts-ignore\n    additionalProperties: _additionalProps,\n    ...jsonSchema\n  } = zodToJsonSchema(schema);\n  return jsonSchema;\n}\n\nexport function createExtractor({\n  purpose: description,\n  schema,\n}: {\n  purpose: string;\n  schema: AnyZodObject;\n}): ChatCompletionFunctions {\n  const parameters = getParameterFromZod(schema);\n  return {\n    name: 'metadata_extract',\n    description,\n    parameters,\n  };\n}\n\ntype ToolImplementation = (\n  a?: any\n) => Promise<Record<string, any>> | Record<string, any>;\n\ntype ToolDefenitionArgs = {\n  name: string;\n  purpose: string;\n  argSchema?: AnyZodObject;\n  implementation: ToolImplementation;\n};\n\nexport class Tools {\n  tools: ChatCompletionFunctions[];\n  functions: Record<string, ToolImplementation>;\n\n  constructor() {\n    this.tools = [];\n    this.functions = {};\n  }\n\n  addTool({\n    name,\n    purpose: description,\n    argSchema: schema = z.object({}),\n    implementation,\n  }: ToolDefenitionArgs) {\n    this.functions[name] = implementation;\n    const parameters = getParameterFromZod(schema);\n    this.tools.push({\n      name,\n      description,\n      parameters,\n    });\n    return this;\n  }\n}\n\ntype RunWithToolsUntilCompleteArgs = {\n  api: OpenAIApi;\n  prompt: string;\n  tools: Tools;\n} & Partial<\n  Exclude<CreateChatCompletionRequest, 'functions' | 'function_call'>\n>;\n\nconst DEFAULT_MODEL = 'gpt-3.5-turbo-0613';\n\nexport async function runWithToolsUntilComplete({\n  api,\n  prompt,\n  tools,\n  model = DEFAULT_MODEL,\n  messages = [],\n  ...opts\n}: RunWithToolsUntilCompleteArgs) {\n  let complete = false;\n  messages = [...messages, { role: 'user', content: prompt }];\n  let lastMessage: ChatCompletionResponseMessage | undefined = undefined;\n  while (!complete) {\n    const chatCompletion = await api.createChatCompletion({\n      model,\n      messages,\n      functions: tools.tools,\n      function_call: 'auto',\n      ...opts,\n    });\n\n    const { message } = chatCompletion.data.choices?.[0];\n    lastMessage = message;\n    if (message) {\n      messages = [...messages, message];\n      if (message.function_call) {\n        const { name: functionName, arguments: _args = '{}' } =\n          message.function_call;\n        const functionArgument: Record<string, any> = JSON.parse(_args);\n        const functionResult = await tools.functions[functionName!](\n          functionArgument\n        );\n        messages = [\n          ...messages,\n          {\n            role: 'function',\n            name: functionName,\n            content: JSON.stringify(functionResult),\n          },\n        ];\n      } else {\n        complete = true;\n      }\n    } else {\n      throw new Error('MessageResponseEmpty');\n    }\n  }\n  return { messages, lastMessage };\n}\n\nexport async function extractDataWithPrompt({\n  api,\n  schema,\n  prompt: content,\n  metadataDescription: purpose = '',\n  ...opts\n}: {\n  api: OpenAIApi;\n  schema: AnyZodObject;\n  prompt: string;\n  metadataDescription?: string;\n} & Partial<\n  Omit<CreateChatCompletionRequest, 'messages' | 'functions' | 'function_call'>\n>) {\n  const fn = createExtractor({ purpose, schema });\n  const { model = DEFAULT_MODEL, ...otherOpts } = opts;\n  const chatCompletion = await api.createChatCompletion({\n    model,\n    messages: [{ role: 'user', content }],\n    functions: [fn],\n    function_call: { name: fn.name },\n    ...otherOpts,\n  });\n  if (chatCompletion.data?.choices?.[0]?.message?.function_call) {\n    const { message } = chatCompletion.data.choices?.[0];\n    return { data: message!.function_call!.arguments, message };\n  } else {\n    throw new Error('ResultEmpty');\n  }\n}\n\nexport async function extractStreamWithPrompt({\n  api,\n  schema,\n  prompt: content,\n  metadataDescription: purpose = '',\n  ...opts\n}: {\n  api: OpenAIApi;\n  schema: AnyZodObject;\n  prompt: string;\n  metadataDescription?: string;\n} & Partial<\n  Omit<CreateChatCompletionRequest, 'messages' | 'functions' | 'function_call'>\n>) {\n  const fn = createExtractor({ purpose, schema });\n  const { model = DEFAULT_MODEL, ...otherOpts } = opts;\n  const chatCompletion = await api.createChatCompletion(\n    {\n      model,\n      messages: [{ role: 'user', content }],\n      functions: [fn],\n      function_call: { name: fn.name },\n      ...otherOpts,\n      stream: true,\n    },\n    { responseType: 'stream' }\n  );\n  //@ts-ignore\n  return chatCompletion.data.pipe(\n    split2((line) => {\n      if (\n        line?.trim() &&\n        !line.includes('[DONE]') &&\n        line.startsWith('data: ')\n      ) {\n        const chunkJson = line.replace('data: ', '');\n        const obj = JSON.parse(chunkJson);\n        return obj?.choices?.[0]?.delta?.function_call?.arguments || '';\n      }\n    })\n  ) as Readable;\n}\n"],"names":["getParameterFromZod","schema","_objectWithoutPropertiesLoose","zodToJsonSchema","_excluded","createExtractor","_ref","name","description","purpose","parameters","DEFAULT_MODEL","_runWithToolsUntilComplete","_asyncToGenerator","_regeneratorRuntime","mark","_callee","_ref3","api","prompt","tools","_ref3$model","model","_ref3$messages","messages","opts","complete","lastMessage","_chatCompletion$data$2","_chatCompletion$data$","message","_message$function_cal","functionName","_message$function_cal2","functionArgument","wrap","_context","prev","next","_excluded2","concat","role","content","undefined","createChatCompletion","_extends","functions","function_call","sent","data","choices","arguments","JSON","parse","stringify","Error","abrupt","stop","apply","this","_extractDataWithPrompt","_callee2","_ref4","_chatCompletion$data","_chatCompletion$data$3","_chatCompletion$data$4","_chatCompletion$data$5","_ref4$metadataDescrip","fn","_opts$model","otherOpts","chatCompletion","_chatCompletion$data$7","_chatCompletion$data$6","_context2","metadataDescription","_excluded3","_excluded5","_extractStreamWithPrompt","_callee3","_ref5","_ref5$metadataDescrip","_opts$model2","_context3","_excluded4","_excluded6","stream","responseType","pipe","split2","line","trim","includes","startsWith","_obj$choices","_obj$choices$","_obj$choices$$delta","_obj$choices$$delta$f","chunkJson","replace","obj","delta","Tools","prototype","addTool","_ref2","_ref2$argSchema","argSchema","z","object","implementation","push","extractDataWithPrompt","_x2","extractStreamWithPrompt","_x3","runWithToolsUntilComplete","_x"],"mappings":"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"}