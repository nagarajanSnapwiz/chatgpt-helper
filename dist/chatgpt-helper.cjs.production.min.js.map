{"version":3,"file":"chatgpt-helper.cjs.production.min.js","sources":["../src/index.ts"],"sourcesContent":["import split2 from 'split2';\nimport { Readable } from 'stream';\nimport { OpenAI } from 'openai';\nimport { zodToJsonSchema } from 'zod-to-json-schema';\nimport { z } from 'zod';\n\n//TODO: have a strict type\ntype AnyZodObject = any;\n\nexport function getParameterFromZod(schema: AnyZodObject) {\n  const {\n    $schema: _$schema,\n    //@ts-ignore\n    additionalProperties: _additionalProps,\n    ...jsonSchema\n  } = zodToJsonSchema(schema);\n  return jsonSchema;\n}\n\nexport function createExtractor({\n  purpose: description,\n  schema,\n}: {\n  purpose: string;\n  schema: AnyZodObject;\n}): OpenAI.Chat.Completions.ChatCompletionCreateParams.Function {\n  const parameters = getParameterFromZod(schema);\n  return {\n    name: 'metadata_extract',\n    description,\n    parameters,\n  };\n}\n\ntype ToolImplementation = (\n  a?: any\n) => Promise<Record<string, any>> | Record<string, any>;\n\ntype ToolDefenitionArgs = {\n  name: string;\n  purpose: string;\n  argSchema?: AnyZodObject;\n  implementation: ToolImplementation;\n};\n\nexport class Tools {\n  tools: OpenAI.Chat.Completions.ChatCompletionCreateParams.Function[];\n  functions: Record<string, ToolImplementation>;\n\n  constructor() {\n    this.tools = [];\n    this.functions = {};\n  }\n\n  addTool({\n    name,\n    purpose: description,\n    argSchema: schema = z.object({}),\n    implementation,\n  }: ToolDefenitionArgs) {\n    this.functions[name] = implementation;\n    const parameters = getParameterFromZod(schema);\n    this.tools.push({\n      name,\n      description,\n      parameters,\n    });\n    return this;\n  }\n}\n\ntype RunWithToolsUntilCompleteArgs = {\n  api: OpenAI;\n  prompt: string;\n  tools: Tools;\n} & Partial<\n  Exclude<\n    OpenAI.Chat.Completions.ChatCompletionCreateParamsNonStreaming,\n    'functions' | 'function_call'\n  >\n>;\n\nconst DEFAULT_MODEL = 'gpt-3.5-turbo-0613';\n\nexport async function runWithToolsUntilComplete({\n  api,\n  prompt,\n  tools,\n  model = DEFAULT_MODEL,\n  messages = [],\n  ...opts\n}: RunWithToolsUntilCompleteArgs) {\n  let complete = false;\n  messages = [...messages, { role: 'user', content: prompt }];\n  let lastMessage: OpenAI.Chat.Completions.ChatCompletionMessage | undefined =\n    undefined;\n  while (!complete) {\n    const chatCompletion = await api.chat.completions.create({\n      model,\n      messages,\n      functions: tools.tools,\n      function_call: 'auto',\n      ...opts,\n    });\n\n    const { message } = chatCompletion.choices?.[0];\n    lastMessage = message;\n    if (message) {\n      messages = [...messages, message];\n      if (message.function_call) {\n        const { name: functionName, arguments: _args = '{}' } =\n          message.function_call;\n        const functionArgument: Record<string, any> = JSON.parse(_args);\n        const functionResult = await tools.functions[functionName!](\n          functionArgument\n        );\n        messages = [\n          ...messages,\n          {\n            role: 'function',\n            name: functionName,\n            content: JSON.stringify(functionResult),\n          },\n        ];\n      } else {\n        complete = true;\n      }\n    } else {\n      throw new Error('MessageResponseEmpty');\n    }\n  }\n  return { messages, lastMessage };\n}\n\nexport async function extractDataWithPrompt({\n  api,\n  schema,\n  prompt: content,\n  metadataDescription: purpose = '',\n  ...opts\n}: {\n  api: OpenAI;\n  schema: AnyZodObject;\n  prompt: string;\n  metadataDescription?: string;\n} & Partial<\n  Omit<\n    OpenAI.Chat.Completions.ChatCompletionCreateParamsNonStreaming,\n    'messages' | 'functions' | 'function_call'\n  >\n>) {\n  const fn = createExtractor({ purpose, schema });\n  const { model = DEFAULT_MODEL, ...otherOpts } = opts;\n  const chatCompletion = await api.chat.completions.create({\n    model,\n    messages: [{ role: 'user', content }],\n    functions: [fn],\n    function_call: { name: fn.name },\n    ...otherOpts,\n  });\n  if (chatCompletion.choices?.[0]?.message?.function_call) {\n    const { message } = chatCompletion.choices?.[0];\n    return { data: message!.function_call!.arguments, message };\n  } else {\n    throw new Error('ResultEmpty');\n  }\n}\n\nexport async function extractStreamWithPrompt({\n  api,\n  schema,\n  prompt: content,\n  metadataDescription: purpose = '',\n  ...opts\n}: {\n  api: OpenAI;\n  schema: AnyZodObject;\n  prompt: string;\n  metadataDescription?: string;\n} & Partial<\n  Omit<\n    OpenAI.Chat.Completions.ChatCompletionCreateParamsStreaming,\n    'messages' | 'functions' | 'function_call'\n  >\n>) {\n  const fn = createExtractor({ purpose, schema });\n  const { model = DEFAULT_MODEL, ...otherOpts } = opts;\n  const chatCompletion = await api.chat.completions.create({\n    model,\n    messages: [{ role: 'user', content }],\n    functions: [fn],\n    function_call: { name: fn.name },\n    ...otherOpts,\n    stream: true,\n  });\n  //@ts-ignore\n  return chatCompletion.data.pipe(\n    split2((line) => {\n      if (\n        line?.trim() &&\n        !line.includes('[DONE]') &&\n        line.startsWith('data: ')\n      ) {\n        const chunkJson = line.replace('data: ', '');\n        const obj = JSON.parse(chunkJson);\n        return obj?.choices?.[0]?.delta?.function_call?.arguments || '';\n      }\n    })\n  ) as Readable;\n}\n"],"names":["getParameterFromZod","schema","_objectWithoutPropertiesLoose","zodToJsonSchema","_excluded","createExtractor","_ref","name","description","purpose","parameters","DEFAULT_MODEL","_runWithToolsUntilComplete","_asyncToGenerator","_regeneratorRuntime","mark","_callee","_ref3","api","prompt","tools","_ref3$model","model","_ref3$messages","messages","opts","complete","lastMessage","_chatCompletion$choic2","_chatCompletion$choic","message","_message$function_cal","functionName","_message$function_cal2","functionArgument","wrap","_context","prev","next","_excluded2","concat","role","content","undefined","chat","completions","create","_extends","functions","function_call","sent","choices","arguments","JSON","parse","stringify","Error","abrupt","stop","apply","this","_extractDataWithPrompt","_callee2","_ref4","_chatCompletion$choic3","_chatCompletion$choic4","_chatCompletion$choic5","_ref4$metadataDescrip","fn","_opts$model","otherOpts","chatCompletion","_chatCompletion$choic7","_chatCompletion$choic6","_context2","metadataDescription","_excluded3","_excluded5","data","_extractStreamWithPrompt","_callee3","_ref5","_ref5$metadataDescrip","_opts$model2","_context3","_excluded4","_excluded6","stream","pipe","split2","line","trim","includes","startsWith","_obj$choices","_obj$choices$","_obj$choices$$delta","_obj$choices$$delta$f","chunkJson","replace","obj","delta","Tools","prototype","addTool","_ref2","_ref2$argSchema","argSchema","z","object","implementation","push","extractDataWithPrompt","_x2","extractStreamWithPrompt","_x3","runWithToolsUntilComplete","_x"],"mappings":"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"}